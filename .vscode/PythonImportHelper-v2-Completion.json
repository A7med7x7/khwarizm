[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "RandomForestClassifier",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "feature_combination",
        "importPath": "khwarizm.feature_selection",
        "description": "khwarizm.feature_selection",
        "isExtraImport": true,
        "detail": "khwarizm.feature_selection",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Ensembles",
        "importPath": "khwarizm.src.ensembles",
        "description": "khwarizm.src.ensembles",
        "isExtraImport": true,
        "detail": "khwarizm.src.ensembles",
        "documentation": {}
    },
    {
        "label": "Ensembles",
        "kind": 6,
        "importPath": "khwarizm.ensembles",
        "description": "khwarizm.ensembles",
        "peekOfCode": "class Ensembles:\n    @staticmethod\n    def ensembles(models: list) -> str:\n        return f\"You have successfully selected: {models}\"",
        "detail": "khwarizm.ensembles",
        "documentation": {}
    },
    {
        "label": "feature_combination",
        "kind": 6,
        "importPath": "khwarizm.feature_selection",
        "description": "khwarizm.feature_selection",
        "peekOfCode": "class feature_combination:\n    def __init__(self, model, metric=accuracy_score, cv=None):\n        self.model = model\n        self.metric = metric\n        self.cv = cv\n        self.baseline_score = None\n        self.feature_importances = None\n    def fit(self, X, y, test_size=0.2, random_state=42):\n        # Split the data into training and testing sets to test the feature\n        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(",
        "detail": "khwarizm.feature_selection",
        "documentation": {}
    },
    {
        "label": "validate",
        "kind": 2,
        "importPath": "khwarizm.feature_selection",
        "description": "khwarizm.feature_selection",
        "peekOfCode": "def validate(trainset,testset,target_col,model=LGBMRegressor(random_state=7)):\n    model.fit(trainset.drop(columns=[target_col]),trainset[target_col])\n    y_predicted = model.predict(testset.drop(columns=target_col))\n    valid_idx = testset[target_col].notna()\n    valid_testset = testset[target_col][valid_idx]\n    valid_pred = y_predicted[valid_idx]\n    print(f\"std : {valid_testset}\")\n    score = mean_squared_error(valid_pred,valid_testset, squared=False)\n    print(f\"score : {score}\")\n    return score",
        "detail": "khwarizm.feature_selection",
        "documentation": {}
    },
    {
        "label": "validation_split",
        "kind": 2,
        "importPath": "khwarizm.feature_selection",
        "description": "khwarizm.feature_selection",
        "peekOfCode": "def validation_split(cv='GroupKFold', n_splits=5,target_col=None, groups=None): \n    stds = []\n    scores = []\n    if cv == 'GroupKFold':\n        splitter = GroupKFold(n_splits=n_splits)\n        split = splitter.split(train.drop(columns=target_col), train[target_col], groups=groups)\n    elif cv == 'KFold':\n        splitter = KFold(n_splits=n_splits)\n        split = splitter.split(train.drop(columns=target_col), train[target_col])\n    else:",
        "detail": "khwarizm.feature_selection",
        "documentation": {}
    },
    {
        "label": "desc",
        "kind": 5,
        "importPath": "khwarizm.reports",
        "description": "khwarizm.reports",
        "peekOfCode": "desc = pd.DataFrame(index = list(train))\ndesc['type'] = train.dtypes\ndesc['count'] = train.count()\ndesc['nunique'] = train.nunique()\ndesc['%unique'] = desc['nunique'] /len(train) * 100\ndesc['null'] = train.isnull().sum()\ndesc['%null'] = desc['null'] / len(train) * 100\ndesc = pd.concat([desc,train.describe().T.drop('count',axis=1)],axis=1)\ndesc.sort_values(by=['type','null']).style.background_gradient(axis=0)\nmissing_percentage = train.isnull().mean(axis=0) * 100",
        "detail": "khwarizm.reports",
        "documentation": {}
    },
    {
        "label": "desc['type']",
        "kind": 5,
        "importPath": "khwarizm.reports",
        "description": "khwarizm.reports",
        "peekOfCode": "desc['type'] = train.dtypes\ndesc['count'] = train.count()\ndesc['nunique'] = train.nunique()\ndesc['%unique'] = desc['nunique'] /len(train) * 100\ndesc['null'] = train.isnull().sum()\ndesc['%null'] = desc['null'] / len(train) * 100\ndesc = pd.concat([desc,train.describe().T.drop('count',axis=1)],axis=1)\ndesc.sort_values(by=['type','null']).style.background_gradient(axis=0)\nmissing_percentage = train.isnull().mean(axis=0) * 100\nprint(missing_percentage)",
        "detail": "khwarizm.reports",
        "documentation": {}
    },
    {
        "label": "desc['count']",
        "kind": 5,
        "importPath": "khwarizm.reports",
        "description": "khwarizm.reports",
        "peekOfCode": "desc['count'] = train.count()\ndesc['nunique'] = train.nunique()\ndesc['%unique'] = desc['nunique'] /len(train) * 100\ndesc['null'] = train.isnull().sum()\ndesc['%null'] = desc['null'] / len(train) * 100\ndesc = pd.concat([desc,train.describe().T.drop('count',axis=1)],axis=1)\ndesc.sort_values(by=['type','null']).style.background_gradient(axis=0)\nmissing_percentage = train.isnull().mean(axis=0) * 100\nprint(missing_percentage)",
        "detail": "khwarizm.reports",
        "documentation": {}
    },
    {
        "label": "desc['nunique']",
        "kind": 5,
        "importPath": "khwarizm.reports",
        "description": "khwarizm.reports",
        "peekOfCode": "desc['nunique'] = train.nunique()\ndesc['%unique'] = desc['nunique'] /len(train) * 100\ndesc['null'] = train.isnull().sum()\ndesc['%null'] = desc['null'] / len(train) * 100\ndesc = pd.concat([desc,train.describe().T.drop('count',axis=1)],axis=1)\ndesc.sort_values(by=['type','null']).style.background_gradient(axis=0)\nmissing_percentage = train.isnull().mean(axis=0) * 100\nprint(missing_percentage)",
        "detail": "khwarizm.reports",
        "documentation": {}
    },
    {
        "label": "desc['%unique']",
        "kind": 5,
        "importPath": "khwarizm.reports",
        "description": "khwarizm.reports",
        "peekOfCode": "desc['%unique'] = desc['nunique'] /len(train) * 100\ndesc['null'] = train.isnull().sum()\ndesc['%null'] = desc['null'] / len(train) * 100\ndesc = pd.concat([desc,train.describe().T.drop('count',axis=1)],axis=1)\ndesc.sort_values(by=['type','null']).style.background_gradient(axis=0)\nmissing_percentage = train.isnull().mean(axis=0) * 100\nprint(missing_percentage)",
        "detail": "khwarizm.reports",
        "documentation": {}
    },
    {
        "label": "desc['null']",
        "kind": 5,
        "importPath": "khwarizm.reports",
        "description": "khwarizm.reports",
        "peekOfCode": "desc['null'] = train.isnull().sum()\ndesc['%null'] = desc['null'] / len(train) * 100\ndesc = pd.concat([desc,train.describe().T.drop('count',axis=1)],axis=1)\ndesc.sort_values(by=['type','null']).style.background_gradient(axis=0)\nmissing_percentage = train.isnull().mean(axis=0) * 100\nprint(missing_percentage)",
        "detail": "khwarizm.reports",
        "documentation": {}
    },
    {
        "label": "desc['%null']",
        "kind": 5,
        "importPath": "khwarizm.reports",
        "description": "khwarizm.reports",
        "peekOfCode": "desc['%null'] = desc['null'] / len(train) * 100\ndesc = pd.concat([desc,train.describe().T.drop('count',axis=1)],axis=1)\ndesc.sort_values(by=['type','null']).style.background_gradient(axis=0)\nmissing_percentage = train.isnull().mean(axis=0) * 100\nprint(missing_percentage)",
        "detail": "khwarizm.reports",
        "documentation": {}
    },
    {
        "label": "desc",
        "kind": 5,
        "importPath": "khwarizm.reports",
        "description": "khwarizm.reports",
        "peekOfCode": "desc = pd.concat([desc,train.describe().T.drop('count',axis=1)],axis=1)\ndesc.sort_values(by=['type','null']).style.background_gradient(axis=0)\nmissing_percentage = train.isnull().mean(axis=0) * 100\nprint(missing_percentage)",
        "detail": "khwarizm.reports",
        "documentation": {}
    },
    {
        "label": "missing_percentage",
        "kind": 5,
        "importPath": "khwarizm.reports",
        "description": "khwarizm.reports",
        "peekOfCode": "missing_percentage = train.isnull().mean(axis=0) * 100\nprint(missing_percentage)",
        "detail": "khwarizm.reports",
        "documentation": {}
    },
    {
        "label": "project_name",
        "kind": 5,
        "importPath": "template",
        "description": "template",
        "peekOfCode": "project_name = \"khwarizm\"\nlist_of_files = [\n    f\"{project_name}/__init__.py\",\n    f\"{project_name}/src/khwarizm/__init__.py\",\n    f\"{project_name}/src/khwarizm/preprocessing.py\",  \n    f\"{project_name}/src/khwarizm/metrics.py\",\n    f\"{project_name}/src/khwarizm/ensembles.py\",\n    f\"{project_name}/src/khwarizm/feature_selection.py\",\n    f\"{project_name}/src/khwarizm/utils.py\",\n    f\"{project_name}/src/khwarizm/logs.py\",",
        "detail": "template",
        "documentation": {}
    },
    {
        "label": "list_of_files",
        "kind": 5,
        "importPath": "template",
        "description": "template",
        "peekOfCode": "list_of_files = [\n    f\"{project_name}/__init__.py\",\n    f\"{project_name}/src/khwarizm/__init__.py\",\n    f\"{project_name}/src/khwarizm/preprocessing.py\",  \n    f\"{project_name}/src/khwarizm/metrics.py\",\n    f\"{project_name}/src/khwarizm/ensembles.py\",\n    f\"{project_name}/src/khwarizm/feature_selection.py\",\n    f\"{project_name}/src/khwarizm/utils.py\",\n    f\"{project_name}/src/khwarizm/logs.py\",\n    f\"{project_name}/src/khwarizm/reports.py\",",
        "detail": "template",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "models = ['lgbm', 'catboost']\noutput = Ensembles.ensembles(models=models)\noutput",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "output = Ensembles.ensembles(models=models)\noutput",
        "detail": "test",
        "documentation": {}
    }
]