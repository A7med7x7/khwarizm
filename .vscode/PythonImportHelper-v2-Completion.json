[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "contextlib,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib.",
        "description": "contextlib.",
        "detail": "contextlib.",
        "documentation": {}
    },
    {
        "label": "LGBMRegressor",
        "importPath": "lightgbm",
        "description": "lightgbm",
        "isExtraImport": true,
        "detail": "lightgbm",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "khwarizm",
        "description": "khwarizm",
        "isExtraImport": true,
        "detail": "khwarizm",
        "documentation": {}
    },
    {
        "label": "suppress_output",
        "kind": 2,
        "importPath": "khwarizm.feature_selection",
        "description": "khwarizm.feature_selection",
        "peekOfCode": "def suppress_output():\n    with open(os.devnull, 'w') as devnull:\n        old_stdout = sys.stdout\n        old_stderr = sys.stderr\n        sys.stdout = devnull\n        sys.stderr = devnull\n        try:\n            yield\n        finally:\n            sys.stdout = old_stdout",
        "detail": "khwarizm.feature_selection",
        "documentation": {}
    },
    {
        "label": "fit",
        "kind": 2,
        "importPath": "khwarizm.feature_selection",
        "description": "khwarizm.feature_selection",
        "peekOfCode": "def fit(model, trainset, testset, target_col):\n    #with suppress_output(): \n    model.fit(trainset.drop(columns=[target_col]),trainset[target_col])\n    y_predicted = model.predict(testset.drop(columns=target_col))\n    valid_idx = testset[target_col].notna()\n    valid_testset = testset[target_col][valid_idx]\n    valid_pred = y_predicted[valid_idx]\n    print(f\"std : {valid_testset}\")\n    score = mean_squared_error(valid_pred,valid_testset, squared=False)\n    print(f\"score : {score}\")",
        "detail": "khwarizm.feature_selection",
        "documentation": {}
    },
    {
        "label": "validate_model",
        "kind": 2,
        "importPath": "khwarizm.feature_selection",
        "description": "khwarizm.feature_selection",
        "peekOfCode": "def validate_model(model,cv='GroupKFold', n_splits=5,dataset=None,target_col=None, groups=None): \n    assert dataset is not None, \"dataset is required\"\n    assert target_col is not None, \"target_col is required\"\n    assert groups is not None, \"groups is required\"\n    stds = []\n    scores = []\n    model = model\n    if cv == 'GroupKFold':\n        splitter = GroupKFold(n_splits=n_splits)\n        split = splitter.split(dataset.drop(columns=target_col), dataset[target_col], groups=groups)",
        "detail": "khwarizm.feature_selection",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "kind": 5,
        "importPath": "khwarizm.feature_selection",
        "description": "khwarizm.feature_selection",
        "peekOfCode": "accuracy_score = 'what ever you set'\n@contextlib.contextmanager\ndef suppress_output():\n    with open(os.devnull, 'w') as devnull:\n        old_stdout = sys.stdout\n        old_stderr = sys.stderr\n        sys.stdout = devnull\n        sys.stderr = devnull\n        try:\n            yield",
        "detail": "khwarizm.feature_selection",
        "documentation": {}
    },
    {
        "label": "Reports",
        "kind": 6,
        "importPath": "khwarizm.reports",
        "description": "khwarizm.reports",
        "peekOfCode": "class Reports: \n    def __init__(self, dataset: pd.DataFrame, trainset: pd.DataFrame, testset: pd.DataFrame, target: str):\n        self.dataset = dataset\n        self.trainset = trainset\n        self.testset = testset\n        self.target = target\n    def basic_stats(self):\n        stats = {}\n        for df_name, df in [(\"dataset\", self.dataset), (\"trainset\", self.trainset), (\"testset\", self.testset)]:\n            stats[df_name] = {",
        "detail": "khwarizm.reports",
        "documentation": {}
    },
    {
        "label": "Features",
        "kind": 6,
        "importPath": "khwarizm.time_series",
        "description": "khwarizm.time_series",
        "peekOfCode": "class Features:\n    def __init__(self, dataset: pd.DataFrame, trainset: pd.DataFrame, testset: pd.DataFrame, date_feature: str):\n        self.dataset = dataset\n        self.trainset = trainset\n        self.testset = testset\n        self.date_feature = date_feature\n    def rolling_feature(self, feature: str, window: int, func: str = 'max'):\n            # Define a dictionary to map function names to pandas methods\n            func_dict = {\n                'max': lambda df: df.rolling(window).max(),",
        "detail": "khwarizm.time_series",
        "documentation": {}
    },
    {
        "label": "plot_numerical_distributions",
        "kind": 2,
        "importPath": "khwarizm.time_series",
        "description": "khwarizm.time_series",
        "peekOfCode": "def plot_numerical_distributions(dataset:pd.DataFrame):\n    numerical_cols = dataset.select_dtypes(include=['number']).columns\n    n_cols = 3\n    n_rows = (len(numerical_cols) + n_cols - 1) // n_cols\n    fig, axes = plt.subplots(n_rows, n_cols, figsize=(15, 5 * n_rows))\n    axes = axes.flatten()\n    for i, col in enumerate(numerical_cols):\n        dataset[col] = dataset[col].apply(np.log1p)\n        sns.histplot(dataset[col], kde=True, ax=axes[i])\n        axes[i].set_title(f'Distribution of {col}')",
        "detail": "khwarizm.time_series",
        "documentation": {}
    },
    {
        "label": "plot_target_curve",
        "kind": 2,
        "importPath": "khwarizm.time_series",
        "description": "khwarizm.time_series",
        "peekOfCode": "def plot_target_curve(dataset,time_feature: str,target: str): \n    dataset[target] = np.arange(len(dataset.index))\n    plt.rc(\n        \"axes\",\n        labelweight=\"bold\",\n        labelsize=\"large\",\n        titleweight=\"bold\",\n        titlesize=16,\n        titlepad=10,\n    )",
        "detail": "khwarizm.time_series",
        "documentation": {}
    },
    {
        "label": "enviroment_setup",
        "kind": 2,
        "importPath": "khwarizm.utils",
        "description": "khwarizm.utils",
        "peekOfCode": "def enviroment_setup(project_name:str):\n    logging.basicConfig(level=logging.INFO, format='[%(asctime)s]: %(message)s:')\n    list_of_files = [\n        f\"{project_name}/data\",\n        f\"{project_name}/notebooks\",\n        f\"{project_name}/src/data\",  \n        f\"{project_name}/src/models\",\n        f\"{project_name}/src/evaluation\",\n        f\"{project_name}/src/inference\",\n        f\"{project_name}/src/utils\",",
        "detail": "khwarizm.utils",
        "documentation": {}
    }
]